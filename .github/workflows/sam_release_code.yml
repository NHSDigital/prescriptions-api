name: sam release code

on:
  workflow_call:
    inputs:
      STACK_NAME:
        required: true
        type: string
      ARTIFACT_BUCKET_PREFIX:
        required: true
        type: string
      TARGET_ENVIRONMENT:
        required: true
        type: string
    secrets:
      CLOUD_FORMATION_DEPLOY_ROLE:
        required: true

jobs:
  sam_release_code:
    runs-on: ubuntu-latest
    environment: ${{ inputs.TARGET_ENVIRONMENT }}
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: eu-west-2
          role-to-assume: ${{ secrets.CLOUD_FORMATION_DEPLOY_ROLE }}
          role-session-name: github-actions

      - uses: actions/download-artifact@v3
        name: download build artifact
        with:
          name: packaged_code
          path: .

      - shell: bash
        name: release code
        run: |
          export artifact_bucket=$(aws cloudformation list-exports --output json | \
            jq -r '.Exports[] | select(.Name == "ci-resources:ArtifactsBucket") | .Value' |grep -o '[^:]*$')
          export artifact_bucket_prefix=${{ inputs.ARTIFACT_BUCKET_PREFIX }}
          export template_file=template.yaml
          export stack_name=${{ inputs.STACK_NAME }}
          export cloud_formation_execution_role=$(aws cloudformation list-exports --output json | \
              jq -r '.Exports[] | select(.Name == "ci-resources:CloudFormationExecutionRole") | .Value' )
          TRUSTSTORE_BUCKET_ARN=$(aws cloudformation describe-stacks \
              --stack-name ci-resources \
              --query 'Stacks[0].Outputs[?OutputKey==`TrustStoreBucket`].OutputValue' --output text)
          TRUSTSTORE_BUCKET_NAME=$(echo ${TRUSTSTORE_BUCKET_ARN} | cut -d ":" -f 6)
          export LATEST_TRUSTSTORE_VERSION=$(aws s3api list-object-versions \
          --bucket ${TRUSTSTORE_BUCKET_NAME} \
          --prefix truststore.pem \
          --query 'Versions[?IsLatest].[VersionId]' --output text)
          make sam-deploy-package
