AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  prescriptions api

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 30
    MemorySize: 256

Parameters:
  TargetSpineServer:
    Type: String
    Description: TargetSpineServer
    Default: none
  SplunkHECToken:
    Type: String
    Description: HEC Token for Cloudformation to Splunk Firehose
    Default: none
  SplunkHECEndpoint:
    Type: String
    Description: HEC Endpoint for Cloudformation to Splunk Firehose
    Default: none
  TruststoreVersion:
    Type: String
    Description: TruststoreVersion
    Default: none
  EnableMutualTLS:
    Type: String
    Description: Whether to use mutual TLS
    Default: false
    AllowedValues: [true, false]

Conditions:
  ShouldUseMutualTLS: !Equals [true, !Ref EnableMutualTLS]

# Example of Mappings
# Mappings:
#   EnvVariables:
#     stage:
#         var1: user1
#         API_BASE_URL: https://baseurl1.com
#     prod:
#         var1: user2
#         API_BASE_URL: https://baseurl2.com

# SAM Connectors: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/reference-sam-connector.html
# https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-connector.html
# More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
# More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api

Resources:
  SplunkFirehose:
    Type: AWS::Serverless::Application
    Properties:
      Location: template_splunk_firehose.yaml
      Parameters:
        SplunkHECToken: !Ref SplunkHECToken
        SplunkHECEndpoint: !Ref SplunkHECEndpoint

  # Authz function stuff
  AuthzFunctionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: "lambda.amazonaws.com"
            Action: "sts:AssumeRole"
  AuthzFunctionLoggingPolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: "allow-lambda-logging"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource:
              - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${AuthzFunctionLogGroup}"
              - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${AuthzFunctionLogGroup}:log-stream:*"
      Roles:
        - !Ref AuthzFunctionRole
  AuthzFunctionKMSPolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: "allow-KMS-access"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - kms:DescribeKey
              - kms:GenerateDataKey*
              - kms:Encrypt
              - kms:ReEncrypt*
            Resource:
              - !GetAtt SplunkFirehose.Outputs.CloudWatchKMSKey
      Roles:
        - !Ref AuthzFunctionRole
  AuthzFunctionLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: !Sub "/aws/lambda/${AuthzFunction}"
      RetentionInDays: 90
      KmsKeyId: !GetAtt SplunkFirehose.Outputs.CloudWatchKMSKey
  AuthzSplunkSubscriptionFilter:
    Type: AWS::Logs::SubscriptionFilter
    Properties:
      RoleArn: !GetAtt SplunkFirehose.Outputs.SplunkSubscriptionFilterRole
      LogGroupName: !Ref AuthzFunctionLogGroup
      FilterPattern: '" "' # All logs
      DestinationArn: !GetAtt SplunkFirehose.Outputs.SplunkDeliveryStream
  AuthzFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: packages/authz/src
      Handler: app.handler
      Runtime: nodejs18.x
      Role: !GetAtt AuthzFunctionRole.Arn
      Architectures:
        - x86_64
      Environment:
        Variables:
          TargetSpineServer: !Ref TargetSpineServer
          NODE_OPTIONS: --enable-source-maps
      Events:
        authz:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApiGateway
            Path: /authz
            Method: get
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
          - app.ts

  # getMyPrescription stuff
  GetMyPrescriptionsRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: "lambda.amazonaws.com"
            Action: "sts:AssumeRole"
  GetMyPrescriptionsLambdaPolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: "allow-lambda-logging"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource:
              - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${GetMyPrescriptionsLogGroup}"
              - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${GetMyPrescriptionsLogGroup}:log-stream:*"
      Roles:
        - !Ref GetMyPrescriptionsRole
  GetMyPrescriptionsKMSPolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: "allow-KMS-access"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - kms:DescribeKey
              - kms:GenerateDataKey*
              - kms:Encrypt
              - kms:ReEncrypt*
            Resource:
              - !GetAtt SplunkFirehose.Outputs.CloudWatchKMSKey
      Roles:
        - !Ref GetMyPrescriptionsRole
  GetMyPrescriptionsLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: !Sub "/aws/lambda/${GetMyPrescriptions}"
      RetentionInDays: 90
      KmsKeyId: !GetAtt SplunkFirehose.Outputs.CloudWatchKMSKey
  GetMyPrescriptionsSplunkSubscriptionFilter:
    Type: AWS::Logs::SubscriptionFilter
    Properties:
      RoleArn: !GetAtt SplunkFirehose.Outputs.SplunkSubscriptionFilterRole
      LogGroupName: !Ref GetMyPrescriptionsLogGroup
      FilterPattern: '" "' # All logs
      DestinationArn: !GetAtt SplunkFirehose.Outputs.SplunkDeliveryStream
  GetMyPrescriptions:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: packages/getMyPrescriptions/src
      Handler: app.handler
      Runtime: nodejs18.x
      Role: !GetAtt GetMyPrescriptionsRole.Arn
      Architectures:
        - x86_64
      Environment:
        Variables:
          TargetSpineServer: !Ref TargetSpineServer
          NODE_OPTIONS: --enable-source-maps
      Events:
        getMyPrescriptions:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApiGateway
            Path: /getMyPrescriptions
            Method: get
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
          - app.ts

  # TLS cert for custom domain
  GenerateCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      ValidationMethod: DNS
      DomainName:
        Fn::Join:
          - "."
          - - !Ref "AWS::StackName"
            - Fn::ImportValue: route53-resources:domain
      DomainValidationOptions:
        - DomainName:
            Fn::Join:
              - "."
              - - !Ref "AWS::StackName"
                - Fn::ImportValue: route53-resources:domain
          HostedZoneId:
            Fn::ImportValue: route53-resources:ZoneID

  # Http api
  HttpApiGateway:
    Type: AWS::Serverless::HttpApi
    Properties:
      StageName: Prod
      Domain:
        DomainName:
          Fn::Join:
            - "."
            - - !Ref "AWS::StackName"
              - Fn::ImportValue: route53-resources:domain
        CertificateArn: !Ref GenerateCertificate
        Route53:
          HostedZoneId:
            Fn::ImportValue: route53-resources:ZoneID
        EndpointConfiguration: REGIONAL
        SecurityPolicy: TLS_1_2
        MutualTlsAuthentication:
          TruststoreUri:
            "Fn::If":
              - ShouldUseMutualTLS
              - Fn::Join:
                  - "/"
                  - - "s3:/"
                    - !Select [
                        5,
                        !Split [
                          ":",
                          Fn::ImportValue: ci-resources:TrustStoreBucket,
                        ],
                      ]
                    - "truststore.pem"
              - !Ref "AWS::NoValue"
          TruststoreVersion:
            "Fn::If":
              - ShouldUseMutualTLS
              - !Ref TruststoreVersion
              - !Ref "AWS::NoValue"
      DisableExecuteApiEndpoint:
        "Fn::If":
          - ShouldUseMutualTLS
          - true
          - !Ref "AWS::NoValue"
