AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  prescriptions api

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 30
    MemorySize: 256

Parameters:
  EndpointUrl:
    Type: String
    Description: EndpointUrl
    Default: none
  TruststoreKey:
    Type: String
    Description: Key for trust store file
    Default: truststore.pem

# Example of Mappings
# Mappings:
#   EnvVariables:
#     stage:
#         var1: user1
#         API_BASE_URL: https://baseurl1.com
#     prod:
#         var1: user2
#         API_BASE_URL: https://baseurl2.com

# SAM Connectors: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/reference-sam-connector.html
# https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-connector.html
# More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
# More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api

Resources:
  # resources for mutual TLS
  PrivateCA:
    Type: AWS::ACMPCA::CertificateAuthority
    Properties:
      KeyAlgorithm: RSA_2048
      SigningAlgorithm: SHA256WITHRSA
      Subject:
        CommonName: !Sub "${AWS::StackName}-rootca"
      Type: ROOT
      UsageMode: SHORT_LIVED_CERTIFICATE

  PrivateCACertificate:
    Type: AWS::ACMPCA::Certificate
    Properties:
      CertificateAuthorityArn: !Ref PrivateCA
      CertificateSigningRequest: !GetAtt PrivateCA.CertificateSigningRequest
      SigningAlgorithm: SHA256WITHRSA
      TemplateArn: "arn:aws:acm-pca:::template/RootCACertificate/V1"
      Validity:
        Type: YEARS
        Value: 10

  PrivateCAActivation:
    Type: AWS::ACMPCA::CertificateAuthorityActivation
    Properties:
      Certificate: !GetAtt PrivateCACertificate.Certificate
      CertificateAuthorityArn: !Ref PrivateCA
      Status: ACTIVE

  MtlsCA:
    Type: AWS::ACMPCA::CertificateAuthority
    Properties:
      Type: SUBORDINATE
      KeyAlgorithm: RSA_2048
      SigningAlgorithm: SHA256WITHRSA
      UsageMode: SHORT_LIVED_CERTIFICATE
      Subject:
        CommonName: !Sub "${AWS::StackName}-mtlsca"

  MtlsCertificate:
    DependsOn: PrivateCAActivation
    Type: AWS::ACMPCA::Certificate
    Properties:
      CertificateAuthorityArn: !Ref PrivateCA
      CertificateSigningRequest: !GetAtt MtlsCA.CertificateSigningRequest
      SigningAlgorithm: SHA256WITHRSA
      TemplateArn: "arn:aws:acm-pca:::template/SubordinateCACertificate_PathLen3/V1"
      Validity:
        Type: YEARS
        Value: 3

  MtlsActivation:
    Type: AWS::ACMPCA::CertificateAuthorityActivation
    Properties:
      CertificateAuthorityArn: !Ref MtlsCA
      Certificate: !GetAtt MtlsCertificate.Certificate
      CertificateChain: !GetAtt PrivateCAActivation.CompleteCertificateChain
      Status: ACTIVE

  ApigeeCert:
    DependsOn: MtlsActivation
    Type: AWS::CertificateManager::Certificate
    Properties:
      CertificateAuthorityArn: !Ref MtlsCA
      CertificateTransparencyLoggingPreference: ENABLED
      DomainName:
        Fn::Join:
          - "."
          - - !Ref "AWS::StackName"
            - Fn::ImportValue: route53-resources:domain
      Tags:
        - Key: Name
          Value: ClientOneCert

  # KMS S3 encryption key
  TrustStoreBucketKMSKey:
    Type: AWS::KMS::Key
    Properties:
      KeyPolicy:
        Version: 2012-10-17
        Id: key-s3
        Statement:
          - Sid: Enable IAM User Permissions
            Effect: Allow
            Principal:
              AWS: !Join
                - ""
                - - "arn:aws:iam::"
                  - !Ref "AWS::AccountId"
                  - ":root"
            Action: "kms:*"
            Resource: "*"
  TrustStoreBucketKMSKeyKMSKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: alias/TrustStoreBucketKMSKeyAlias
      TargetKeyId:
        Ref: TrustStoreBucketKMSKey

  TrustStoreBucket:
    Type: AWS::S3::Bucket
    Properties:
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              KMSMasterKeyID: !Sub "arn:aws:kms:${AWS::Region}:${AWS::AccountId}:${TrustStoreBucketKMSKeyKMSKeyAlias}"
              SSEAlgorithm: "aws:kms"

  TrustStoreBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref TrustStoreBucket
      PolicyDocument:
        Statement:
          - Effect: "Deny"
            Action: "s3:*"
            Principal: "*"
            Resource:
              - !Join ["", [!GetAtt TrustStoreBucket.Arn, "/*"]]
              - !GetAtt TrustStoreBucket.Arn
            Condition:
              Bool:
                aws:SecureTransport: false
          - Effect: "Allow"
            Action:
              - "s3:GetObject*"
              - "s3:PutObject*"
              - "s3:GetBucket*"
              - "s3:List*"
            Resource:
              - !Join ["", [!GetAtt TrustStoreBucket.Arn, "/*"]]
              - !GetAtt TrustStoreBucket.Arn
            Principal:
              AWS:
                - !GetAtt TrustedStoreCustomResourceFunctionRole.Arn

  TrustStoreBucketKMSPolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: "allow-KMS-access"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - kms:DescribeKey
              - kms:GenerateDataKey*
              - kms:Encrypt
              - kms:ReEncrypt*
            Resource:
              - !GetAtt TrustStoreBucketKMSKey.Arn
      Roles:
        - !Ref TrustedStoreCustomResourceFunctionRole

  TrustedStoreCustomResourceFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: TrustedStoreCustomResourceFunction
      Handler: com.auth.TrustedStoreCustomResourceHandler::handleRequest
      Timeout: 120
      MemorySize: 1536
      Runtime: java8.al2
      CodeUri: packages/trustedStoreCustomResourceHandler/
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref TrustStoreBucket

  TrustedStoreCustomResource:
    Type: Custom::TrustedStore
    Properties:
      ServiceToken: !GetAtt TrustedStoreCustomResourceFunction.Arn
      TrustStoreBucket: !Ref TrustStoreBucket
      TrustStoreKey: !Ref TruststoreKey
      Certs:
        - !GetAtt MtlsCertificate.Certificate
        - !GetAtt PrivateCACertificate.Certificate

  # common KMS key for cloudwatch log groups
  CloudWatchKMSKey:
    Type: "AWS::KMS::Key"
    Properties:
      KeyPolicy:
        Version: 2012-10-17
        Id: key-policy-id
        Statement:
          - Sid: Enable IAM User Permissions
            Effect: Allow
            Principal:
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action: "kms:*"
            Resource: "*"
          - Effect: Allow
            Principal:
              Service: !Sub "logs.${AWS::Region}.amazonaws.com"
            Action:
              - kms:Encrypt*
              - kms:Decrypt*
              - kms:ReEncrypt*
              - kms:GenerateDataKey*
              - kms:Describe*
            Resource: "*"
            Condition:
              ArnEquals:
                kms:EncryptionContext:aws:logs:arn: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*"
  CloudWatchKMSKeyAlias:
    Type: "AWS::KMS::Alias"
    Properties:
      AliasName: !Sub "alias/${AWS::StackName}-CloudWatchKMSAlias"
      TargetKeyId: !Ref CloudWatchKMSKey

  # Authz function stuff
  AuthzFunctionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: "lambda.amazonaws.com"
            Action: "sts:AssumeRole"
  AuthzFunctionLoggingPolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: "allow-lambda-logging"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource:
              - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${AuthzFunctionLogGroup}"
              - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${AuthzFunctionLogGroup}:log-stream:*"
      Roles:
        - !Ref AuthzFunctionRole
  AuthzFunctionKMSPolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: "allow-KMS-access"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - kms:DescribeKey
              - kms:GenerateDataKey*
              - kms:Encrypt
              - kms:ReEncrypt*
            Resource:
              - !GetAtt CloudWatchKMSKey.Arn
      Roles:
        - !Ref AuthzFunctionRole
  AuthzFunctionLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: !Sub "/aws/lambda/${AuthzFunction}"
      RetentionInDays: 90
      KmsKeyId: !GetAtt CloudWatchKMSKey.Arn
  AuthzFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: packages/authz/src
      Handler: app.handler
      Runtime: nodejs18.x
      Role: !GetAtt AuthzFunctionRole.Arn
      Architectures:
        - x86_64
      Environment:
        Variables:
          EndpointUrl: !Ref EndpointUrl
          NODE_OPTIONS: --enable-source-maps
      Events:
        authz:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApiGateway
            Path: /authz
            Method: get
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
          - app.ts

  # getMyPrescription stuff
  GetMyPrescriptionsRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: "lambda.amazonaws.com"
            Action: "sts:AssumeRole"
  GetMyPrescriptionsLambdaPolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: "allow-lambda-logging"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource:
              - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${GetMyPrescriptionsLogGroup}"
              - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${GetMyPrescriptionsLogGroup}:log-stream:*"
      Roles:
        - !Ref GetMyPrescriptionsRole
  GetMyPrescriptionsKMSPolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: "allow-KMS-access"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - kms:DescribeKey
              - kms:GenerateDataKey*
              - kms:Encrypt
              - kms:ReEncrypt*
            Resource:
              - !GetAtt CloudWatchKMSKey.Arn
      Roles:
        - !Ref GetMyPrescriptionsRole
  GetMyPrescriptionsLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: !Sub "/aws/lambda/${GetMyPrescriptions}"
      RetentionInDays: 90
      KmsKeyId: !GetAtt CloudWatchKMSKey.Arn
  GetMyPrescriptions:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: packages/getMyPrescriptions/src
      Handler: app.handler
      Runtime: nodejs18.x
      Role: !GetAtt GetMyPrescriptionsRole.Arn
      Architectures:
        - x86_64
      Environment:
        Variables:
          EndpointUrl: !Ref EndpointUrl
          NODE_OPTIONS: --enable-source-maps
      Events:
        authz:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApiGateway
            Path: /getMyPrescriptions
            Method: get
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
          - app.ts

  # TLS cert for custom domain
  GenerateCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      ValidationMethod: DNS
      DomainName:
        Fn::Join:
          - "."
          - - !Ref "AWS::StackName"
            - Fn::ImportValue: route53-resources:domain
      DomainValidationOptions:
        - DomainName:
            Fn::Join:
              - "."
              - - !Ref "AWS::StackName"
                - Fn::ImportValue: route53-resources:domain
          #          HostedZoneId: Z079610123574AMWRCQYB
          HostedZoneId:
            Fn::ImportValue: route53-resources:ZoneID

  # Http api
  HttpApiGateway:
    Type: AWS::Serverless::HttpApi
    Properties:
      StageName: Prod
      Domain:
        DomainName:
          Fn::Join:
            - "."
            - - !Ref "AWS::StackName"
              - Fn::ImportValue: route53-resources:domain
        CertificateArn: !Ref GenerateCertificate
        Route53:
          HostedZoneId:
            Fn::ImportValue: route53-resources:ZoneID
        EndpointConfiguration: REGIONAL
        SecurityPolicy: TLS_1_2
        MutualTlsAuthentication:
          TruststoreUri: !GetAtt TrustedStoreCustomResource.TrustStoreUri
          TruststoreVersion: !GetAtt TrustedStoreCustomResource.ObjectVersion
      DisableExecuteApiEndpoint: true

Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  AuthzFunction:
    Description: "Authz Lambda Function ARN"
    Value: !GetAtt AuthzFunction.Arn
  AuthzFunctionIamRole:
    Description: "Implicit IAM Role created for the Authz function"
    Value: !GetAtt AuthzFunctionRole.Arn
  GetMyPrescriptionsFunction:
    Description: "GetMyPrescriptions Lambda Function ARN"
    Value: !GetAtt GetMyPrescriptions.Arn
  GetMyPrescriptionsFunctionIamRole:
    Description: "Implicit IAM Role created for the GetMyPrescriptions function"
    Value: !GetAtt GetMyPrescriptionsRole.Arn
